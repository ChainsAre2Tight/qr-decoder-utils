package qr_v1

import (
	"reflect"
	"testing"

	bitreader "github.com/ChainsAre2Tight/qr-decoder-utils/internal/decoding/common/bit_reader"
)

func TestQRV1Sequence(t *testing.T) {
	sequence := bitreader.GenerateReadSequence(21, 21, oob{})
	expectedSequence := [][2]int{
		// up x3
		{20, 20}, {19, 20}, {20, 19}, {19, 19}, {20, 18}, {19, 18}, {20, 17}, {19, 17},
		{20, 16}, {19, 16}, {20, 15}, {19, 15}, {20, 14}, {19, 14}, {20, 13}, {19, 13},
		{20, 12}, {19, 12}, {20, 11}, {19, 11}, {20, 10}, {19, 10}, {20, 9}, {19, 9},
		// down x3
		{18, 9}, {17, 9}, {18, 10}, {17, 10}, {18, 11}, {17, 11}, {18, 12}, {17, 12},
		{18, 13}, {17, 13}, {18, 14}, {17, 14}, {18, 15}, {17, 15}, {18, 16}, {17, 16},
		{18, 17}, {17, 17}, {18, 18}, {17, 18}, {18, 19}, {17, 19}, {18, 20}, {17, 20},
		// up x3
		{16, 20}, {15, 20}, {16, 19}, {15, 19}, {16, 18}, {15, 18}, {16, 17}, {15, 17},
		{16, 16}, {15, 16}, {16, 15}, {15, 15}, {16, 14}, {15, 14}, {16, 13}, {15, 13},
		{16, 12}, {15, 12}, {16, 11}, {15, 11}, {16, 10}, {15, 10}, {16, 9}, {15, 9},
		// down x3
		{14, 9}, {13, 9}, {14, 10}, {13, 10}, {14, 11}, {13, 11}, {14, 12}, {13, 12},
		{14, 13}, {13, 13}, {14, 14}, {13, 14}, {14, 15}, {13, 15}, {14, 16}, {13, 16},
		{14, 17}, {13, 17}, {14, 18}, {13, 18}, {14, 19}, {13, 19}, {14, 20}, {13, 20},
		// up x3
		{12, 20}, {11, 20}, {12, 19}, {11, 19}, {12, 18}, {11, 18}, {12, 17}, {11, 17},
		{12, 16}, {11, 16}, {12, 15}, {11, 15}, {12, 14}, {11, 14}, {12, 13}, {11, 13},
		{12, 12}, {11, 12}, {12, 11}, {11, 11}, {12, 10}, {11, 10}, {12, 9}, {11, 9},
		// up, up, down, down skipping y = 6
		{12, 8}, {11, 8}, {12, 7}, {11, 7}, {12, 5}, {11, 5}, {12, 4}, {11, 4},
		{12, 3}, {11, 3}, {12, 2}, {11, 2}, {12, 1}, {11, 1}, {12, 0}, {11, 0},
		{10, 0}, {9, 0}, {10, 1}, {9, 1}, {10, 2}, {9, 2}, {10, 3}, {9, 3},
		{10, 4}, {9, 4}, {10, 5}, {9, 5}, {10, 7}, {9, 7}, {10, 8}, {9, 8},
		// down x3
		{10, 9}, {9, 9}, {10, 10}, {9, 10}, {10, 11}, {9, 11}, {10, 12}, {9, 12},
		{10, 13}, {9, 13}, {10, 14}, {9, 14}, {10, 15}, {9, 15}, {10, 16}, {9, 16},
		{10, 17}, {9, 17}, {10, 18}, {9, 18}, {10, 19}, {9, 19}, {10, 20}, {9, 20},
		// last 4, up down up down, skipping x = 6
		{8, 12}, {7, 12}, {8, 11}, {7, 11}, {8, 10}, {7, 10}, {8, 9}, {7, 9},
		{5, 9}, {4, 9}, {5, 10}, {4, 10}, {5, 11}, {4, 11}, {5, 12}, {4, 12},
		{3, 12}, {2, 12}, {3, 11}, {2, 11}, {3, 10}, {2, 10}, {3, 9}, {2, 9},
		{1, 9}, {0, 9}, {1, 10}, {0, 10}, {1, 11}, {0, 11}, {1, 12}, {0, 12},
	}
	if !reflect.DeepEqual(sequence, expectedSequence) {
		t.Error("\ngot\n", sequence, "\nwant\n", expectedSequence)
	}
}
