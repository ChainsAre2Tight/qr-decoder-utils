package qr_v2

import (
	"reflect"
	"testing"

	bitreader "github.com/ChainsAre2Tight/qr-decoder-utils/internal/decoding/QR/common/bit_reader"
)

func TestQRV2Sequence(t *testing.T) {

	expectedSequence := [][2]int{
		// up x4
		{24, 24}, {23, 24}, {24, 23}, {23, 23}, {24, 22}, {23, 22}, {24, 21}, {23, 21},
		{24, 20}, {23, 20}, {24, 19}, {23, 19}, {24, 18}, {23, 18}, {24, 17}, {23, 17},
		{24, 16}, {23, 16}, {24, 15}, {23, 15}, {24, 14}, {23, 14}, {24, 13}, {23, 13},
		{24, 12}, {23, 12}, {24, 11}, {23, 11}, {24, 10}, {23, 10}, {24, 9}, {23, 9},
		// down x4
		{22, 9}, {21, 9}, {22, 10}, {21, 10}, {22, 11}, {21, 11}, {22, 12}, {21, 12},
		{22, 13}, {21, 13}, {22, 14}, {21, 14}, {22, 15}, {21, 15}, {22, 16}, {21, 16},
		{22, 17}, {21, 17}, {22, 18}, {21, 18}, {22, 19}, {21, 19}, {22, 20}, {21, 20},
		{22, 21}, {21, 21}, {22, 22}, {21, 22}, {22, 23}, {21, 23}, {22, 24}, {21, 24},
		// up, skip4, up, up
		{20, 24}, {19, 24}, {20, 23}, {19, 23}, {20, 22}, {19, 22}, {20, 21}, {19, 21},
		{20, 15}, {19, 15}, {20, 14}, {19, 14}, {20, 13}, {19, 13}, {20, 12}, {19, 12},
		{20, 11}, {19, 11}, {20, 10}, {19, 10}, {20, 9}, {19, 9},
		// down, down3, skip4, down
		{18, 9}, {17, 9}, {18, 10}, {17, 10}, {18, 11}, {17, 11}, {18, 12}, {17, 12},
		{18, 13}, {17, 13}, {18, 14}, {17, 14}, {18, 15}, {17, 15},
		{18, 21}, {17, 21}, {18, 22}, {17, 22}, {18, 23}, {17, 23}, {18, 24}, {17, 24},
		// up, thin, up minus corner, up...
		{16, 24}, {15, 24}, {16, 23}, {15, 23}, {16, 22}, {15, 22}, {16, 21}, {15, 21},
		{15, 20}, {15, 19}, {15, 18}, {15, 17},
		{15, 16}, {16, 15}, {15, 15}, {16, 14}, {15, 14}, {16, 13}, {15, 13},
	}
	sequence := bitreader.GenerateReadSequence(25, 25, oob{})[:len(expectedSequence)]
	if !reflect.DeepEqual(sequence, expectedSequence) {
		t.Error("\ngot\n", sequence, "\nwant\n", expectedSequence)
	}
}
